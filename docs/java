document.addEventListener("DOMContentLoaded", () => {
    // Tab Navigation
    const tabLinks = document.querySelectorAll('.tab-link');
    const contentSections = {
        home: document.getElementById('home'),
        charts: document.getElementById('charts'),
        contacts: document.getElementById('contacts'),
        more: document.getElementById('more')
    };

    const infoPanel = document.getElementById('info-panel');  // Home info panel
    const chartsAdvisory = document.getElementById('charts-advisory');  // Charts section advisory

    // Initially hide all content sections except Home
    contentSections.home.style.display = 'block';
    contentSections.charts.style.display = 'none';
    contentSections.contacts.style.display = 'none';
    contentSections.more.style.display = 'none';
    infoPanel.style.display = 'block';  // Display the info panel only on home tab
    chartsAdvisory.style.display = 'none'; // Hide the charts advisory initially

    // Tab switching logic
    tabLinks.forEach(link => {
        link.addEventListener('click', (event) => {
            // Hide all content sections
            Object.values(contentSections).forEach(section => {
                section.style.display = 'none';
            });

            // Hide the info-panel (only show on home tab)
            infoPanel.style.display = 'none';

            // Hide the charts advisory (only show on charts tab)
            chartsAdvisory.style.display = 'none';

            // Remove active class from all links
            tabLinks.forEach(tab => {
                tab.classList.remove('active');
            });

            // Show the appropriate content based on clicked tab
            const targetTab = event.target.dataset.tab;
            contentSections[targetTab].style.display = 'block';

            if (targetTab === 'home') {
                infoPanel.style.display = 'block'; // Show info panel on Home tab
            } else if (targetTab === 'charts') {
                chartsAdvisory.style.display = 'block'; // Show charts advisory on Charts tab
            }

            // Add active class to the clicked tab
            event.target.classList.add('active');
        });
    });

    // Flight Planner Logic
    const flightPlannerForm = document.getElementById('flight-planner-form');
    const previewPanel = document.getElementById('preview-panel');
    const previewButton = document.getElementById('preview-button');
    const plansList = document.getElementById('plans-list');
    const waypointsContainer = document.getElementById('waypoints');

    // Add Waypoint Input
    const addWaypointButton = document.getElementById('add-waypoint');
    addWaypointButton.addEventListener('click', () => {
        const waypointInput = document.createElement('input');
        waypointInput.classList.add('waypoint-input');
        waypointInput.type = 'text';
        waypointInput.placeholder = 'Waypoint ICAO Code';
        const waypointItem = document.createElement('div');
        waypointItem.classList.add('waypoint-item');
        waypointItem.appendChild(waypointInput);
        waypointsContainer.appendChild(waypointItem);
    });

    // Function to generate flight plan details
    function getFlightPlanDetails() {
        const departure = document.getElementById('departure').value;
        const destination = document.getElementById('destination').value;
        const altitude = document.getElementById('altitude').value;
        const remarks = document.getElementById('remarks').value;
        const waypoints = Array.from(document.querySelectorAll('.waypoint-input')).map(input => input.value);

        return { departure, destination, altitude, remarks, waypoints };
    }

    // Preview Flight Plan
    previewButton.addEventListener('click', (e) => {
        e.preventDefault();

        const { departure, destination, altitude, remarks, waypoints } = getFlightPlanDetails();

        if (!departure || !destination || !altitude) {
            previewPanel.innerHTML = `<div style="color: red;">Please fill in all required fields!</div>`;
            return;
        }

        previewPanel.innerHTML = `
            <div>
                <strong>Preview Flight Plan:</strong><br>
                Departure: ${departure} ➔ Destination: ${destination}<br>
                Altitude: ${altitude} ft<br>
                Remarks: ${remarks || 'None'}<br>
                Waypoints: ${waypoints.join(' → ') || 'None'}
            </div>
        `;
    });

    // Submit Flight Plan
    flightPlannerForm.addEventListener('submit', (e) => {
        e.preventDefault();

        const { departure, destination, altitude, remarks, waypoints } = getFlightPlanDetails();

        if (!departure || !destination || !altitude) {
            alert("Please fill in all required fields!");
            return;
        }

        // Add flight plan to the list of submitted plans
        const planItem = document.createElement('div');
        planItem.classList.add('plan-item');
        planItem.innerHTML = `
            <div>
                <strong>${departure} ➔ ${destination}</strong><br>
                Altitude: ${altitude} ft | Remarks: ${remarks || 'None'}<br>
                Waypoints: ${waypoints.join(' → ') || 'None'}
            </div>
            <button type="button" class="delete-btn" onclick="deletePlan(this)">Delete</button>
        `;
        plansList.appendChild(planItem);

        // Clear the form and preview after submission
        flightPlannerForm.reset();
        previewPanel.innerHTML = '';
        waypointsContainer.innerHTML = '';
    });

    // Function to delete a flight plan
    window.deletePlan = function (button) {
        button.parentElement.remove();
    };
});
